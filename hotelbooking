//SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.6.0 <0.9.0;

import "https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/1dc26f977c57a6ba3ed6d7c53cafdb191e7e59ae/contracts/BokkyPooBahsDateTimeLibrary.sol";
contract hotelbooking{
    address owner;
    constructor(){
        owner = msg.sender;
    }

    struct details{
        uint roomno;
        address customeradd;
        uint checkintimestamp;
        uint checkouttimestamp;
        bool availability;
        uint pricepaid;
    }
    // struct to store details of customer

    uint public amount = 0;
    // amount to be displayed to the owner

    details[10] private room;
    uint[10] roomprice = [2*1e18,3*1e18,4*1e18,1*1e18,4*1e18,4*1e18,4*1e18,4*1e18,7*1e18,8*1e18];
    // array of price values

    function viewroomprice(uint roomnum) view public returns(string memory , uint){ 
        if(room[roomnum-1].availability == true){
            return("Not Available" , 0);
        }
        else{
            return("available" ,roomprice[roomnum-1]);
        } 
    }
    // views customer there bookings


    function addpricevalue_only_by_owner(uint room_number,uint price) public {
        roomprice[room_number-1] = price;
    }
    // only owner can alter the prices

    function selectroom(uint room_number,uint check_in_day,uint check_in_month,uint check_in_year) public payable{
        if(room[room_number-1].availability == false){
            require(msg.value == roomprice[room_number-1],"payment failed");
            room[room_number-1] = details(room_number,msg.sender,BokkyPooBahsDateTimeLibrary.timestampFromDate(check_in_year,check_in_month,check_in_day),BokkyPooBahsDateTimeLibrary.timestampFromDate(check_in_year,check_in_month,check_in_day)+86400,true,msg.value);
        }
        else{
            room[room_number-1].availability = false;
        }
    }
    // selection of room by customer


    function viewbookings_only_by_customer(uint _roomnumber) public view returns(string memory,address){
        if(room[_roomnumber-1].customeradd == msg.sender){
            return("CONFIRMED", msg.sender);
        }
        else{
            return("No Bookings",msg.sender);
        }
    }
    // views booking of customers



    function cancelbooking_only_by_customer(uint room_num) public{
        require(msg.sender == room[room_num-1].customeradd, "YOU DONT HAVE BOOKING IN THIS ROOM");
        if(BokkyPooBahsDateTimeLibrary.diffDays(block.timestamp,room[room_num-1].checkintimestamp)>7){
            payable(msg.sender).transfer(room[room_num-1].pricepaid);
            refreshroomdetail(room_num-1);
        }
        else if(BokkyPooBahsDateTimeLibrary.diffDays(block.timestamp, room[room_num-1].checkintimestamp)<7 && BokkyPooBahsDateTimeLibrary.diffDays(block.timestamp,room[room_num-1].checkintimestamp)>2){
            payable(msg.sender).transfer(room[room_num-1].pricepaid/2);
            amount += room[room_num-1].pricepaid/2;
            refreshroomdetail(room_num-1);

        }
        else{
            amount += room[room_num-1].pricepaid;
            refreshroomdetail(room_num-1);
        }
    }
    // cancels booking of the customer

    function withdrawpayments_only_by_owner(uint amount_to_withdraw) public{
        require(msg.sender == owner);
        require(amount_to_withdraw<= amount);
        (bool success,) = payable(msg.sender).call{value : amount_to_withdraw}("");
        require(success == true , "not send");
        amount - amount_to_withdraw;
    }
    // owner can withdraw the money from smart contract

    function clearroomdetails_only_by_owner() public{
        require(msg.sender == owner);
        for(uint i =0; i<10;i++){
            if(room[i].checkouttimestamp<block.timestamp){
                amount += room[i].pricepaid;
                refreshroomdetail(i);
            }
            else{
                continue;
            }
        }
    }
    //only owner clear the details feed in the struct 

    function refreshroomdetail(uint room_num) private{
        delete room[room_num].roomno;
        delete room[room_num].customeradd;
        delete room[room_num].checkintimestamp;
        delete room[room_num].checkouttimestamp;
        delete room[room_num].availability;
        delete room[room_num].pricepaid;
    }
    // function for clearing detail
}
